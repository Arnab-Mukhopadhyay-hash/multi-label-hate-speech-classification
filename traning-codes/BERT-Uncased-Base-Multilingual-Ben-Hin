{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8250654,"sourceType":"datasetVersion","datasetId":4895458}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Dataset Processing","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:18.483315Z","iopub.execute_input":"2024-05-02T15:07:18.484331Z","iopub.status.idle":"2024-05-02T15:07:18.861035Z","shell.execute_reply.started":"2024-05-02T15:07:18.484292Z","shell.execute_reply":"2024-05-02T15:07:18.860216Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"## Bengali Dataset Reading","metadata":{}},{"cell_type":"code","source":"ben_df_folder = \"/kaggle/input/modified-hate-speech-bengali-hindi/bengali-hate-speech/\"\nben_df_dict = {}\nben_df_dict['train'] = pd.read_csv(ben_df_folder + \"bengali-hate-speech_train.csv\")\nben_df_dict['test'] = pd.read_csv(ben_df_folder + \"bengali-hate-speech_test.csv\")\nben_df_dict['valid'] = pd.read_csv(ben_df_folder + \"bengali-hate-speech_valid.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:18.863059Z","iopub.execute_input":"2024-05-02T15:07:18.863997Z","iopub.status.idle":"2024-05-02T15:07:19.053174Z","shell.execute_reply.started":"2024-05-02T15:07:18.863962Z","shell.execute_reply":"2024-05-02T15:07:19.050144Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"## Hindi Dataset Reading","metadata":{}},{"cell_type":"code","source":"hin_df_folder = \"/kaggle/input/modified-hate-speech-bengali-hindi/hindi-hate-speech/\"\nhin_df_dict = {}\nhin_df_dict['train'] = pd.read_csv(hin_df_folder + \"hindi-hate-speech_train.csv\")\nhin_df_dict['test'] = pd.read_csv(hin_df_folder + \"hindi-hate-speech_test.csv\")\nhin_df_dict['valid'] = pd.read_csv(hin_df_folder + \"hindi-hate-speech_valid.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:19.056575Z","iopub.execute_input":"2024-05-02T15:07:19.057206Z","iopub.status.idle":"2024-05-02T15:07:19.205173Z","shell.execute_reply.started":"2024-05-02T15:07:19.057165Z","shell.execute_reply":"2024-05-02T15:07:19.204136Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"## Merge the Dataframe Dicts","metadata":{}},{"cell_type":"code","source":"merged_df_dict = {}\nfor key in ben_df_dict.keys():\n    merged_df_dict[key] = pd.concat([ben_df_dict[key], hin_df_dict[key]], axis=0, ignore_index=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:19.207678Z","iopub.execute_input":"2024-05-02T15:07:19.208593Z","iopub.status.idle":"2024-05-02T15:07:19.215579Z","shell.execute_reply.started":"2024-05-02T15:07:19.208556Z","shell.execute_reply":"2024-05-02T15:07:19.214655Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"from datasets import Dataset, DatasetDict","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:19.216705Z","iopub.execute_input":"2024-05-02T15:07:19.217057Z","iopub.status.idle":"2024-05-02T15:07:20.326528Z","shell.execute_reply.started":"2024-05-02T15:07:19.217023Z","shell.execute_reply":"2024-05-02T15:07:20.325558Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"merged_dataset_dict = DatasetDict()\nfor key in merged_df_dict.keys():\n    merged_dataset_dict[key] = Dataset.from_pandas(merged_df_dict[key])","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:20.327605Z","iopub.execute_input":"2024-05-02T15:07:20.328052Z","iopub.status.idle":"2024-05-02T15:07:20.442954Z","shell.execute_reply.started":"2024-05-02T15:07:20.328027Z","shell.execute_reply":"2024-05-02T15:07:20.442179Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"features = merged_dataset_dict['train'].column_names\nfeatures.remove('text')\nnum_features = len(features)\nfeatures, num_features","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:20.444008Z","iopub.execute_input":"2024-05-02T15:07:20.444283Z","iopub.status.idle":"2024-05-02T15:07:20.451856Z","shell.execute_reply.started":"2024-05-02T15:07:20.444259Z","shell.execute_reply":"2024-05-02T15:07:20.450941Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(['defamation', 'hate', 'non-hate', 'violence', 'vulgar'], 5)"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom transformers import AutoTokenizer, DataCollatorWithPadding, AutoModelForSequenceClassification","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:20.452929Z","iopub.execute_input":"2024-05-02T15:07:20.453217Z","iopub.status.idle":"2024-05-02T15:07:36.345280Z","shell.execute_reply.started":"2024-05-02T15:07:20.453194Z","shell.execute_reply":"2024-05-02T15:07:36.344301Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"2024-05-02 15:07:22.245774: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-02 15:07:22.245898: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-02 15:07:22.390006: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"model_name = \"google-bert/bert-base-multilingual-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForSequenceClassification.from_pretrained(\n    model_name,\n    problem_type=\"multi_label_classification\",\n    num_labels=num_features\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:36.346516Z","iopub.execute_input":"2024-05-02T15:07:36.347087Z","iopub.status.idle":"2024-05-02T15:07:41.491639Z","shell.execute_reply.started":"2024-05-02T15:07:36.347060Z","shell.execute_reply":"2024-05-02T15:07:41.490879Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d246c8d75107413c906ec838c8e76335"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/625 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"28c17b4b356841f8b5f7539b937222a9"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/872k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"af166712f4484b979c05e6a94e83162e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.72M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4a82ecdd7f39465bbb6401a417c1c302"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/672M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"92a5dde656ca4469963ccef861a4d57a"}},"metadata":{}},{"name":"stderr","text":"Some weights of BertForSequenceClassification were not initialized from the model checkpoint at google-bert/bert-base-multilingual-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}]},{"cell_type":"code","source":"def tokenize_dataset(dataset):\n    encoding = tokenizer(\n        dataset['text'],\n        padding=\"max_length\",\n        max_length=256,\n        truncation=True\n    )\n    labels_batch = {k: dataset[k] for k in dataset.keys() if k in features}\n    labels_matrix = np.zeros((len(dataset['text'],), len(features)))\n    for idx, label in enumerate(features):\n        labels_matrix[:, idx] = labels_batch[label]\n    encoding['labels'] = labels_matrix.tolist()\n    return encoding\n\nencoded_dataset_dict_tokenized = merged_dataset_dict.map(\n    tokenize_dataset,\n    batched=True,\n    remove_columns=['text'] + features\n)\n\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:41.496087Z","iopub.execute_input":"2024-05-02T15:07:41.496428Z","iopub.status.idle":"2024-05-02T15:07:47.793504Z","shell.execute_reply.started":"2024-05-02T15:07:41.496401Z","shell.execute_reply":"2024-05-02T15:07:47.792639Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/16979 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"35f9c592e8bf415d86df3fc9421b9ccf"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4868 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bc37e22402eb4f0baff764a0280ea4a6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/2418 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0888fe2e7d014b3296f3841fa2c88449"}},"metadata":{}}]},{"cell_type":"code","source":"encoded_dataset_dict_tokenized.set_format(\n    type='torch'\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:47.794600Z","iopub.execute_input":"2024-05-02T15:07:47.794930Z","iopub.status.idle":"2024-05-02T15:07:47.800730Z","shell.execute_reply.started":"2024-05-02T15:07:47.794903Z","shell.execute_reply":"2024-05-02T15:07:47.799747Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"encoded_dataset_dict_tokenized","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:47.802026Z","iopub.execute_input":"2024-05-02T15:07:47.802941Z","iopub.status.idle":"2024-05-02T15:07:47.815637Z","shell.execute_reply.started":"2024-05-02T15:07:47.802914Z","shell.execute_reply":"2024-05-02T15:07:47.814813Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"DatasetDict({\n    train: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 16979\n    })\n    test: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 4868\n    })\n    valid: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 2418\n    })\n})"},"metadata":{}}]},{"cell_type":"code","source":"import sklearn.metrics as matrices\nfrom transformers import EvalPrediction","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:47.816930Z","iopub.execute_input":"2024-05-02T15:07:47.817269Z","iopub.status.idle":"2024-05-02T15:07:47.828057Z","shell.execute_reply.started":"2024-05-02T15:07:47.817239Z","shell.execute_reply":"2024-05-02T15:07:47.827208Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# source: https://jesusleal.io/2021/04/21/Longformer-multilabel-classification/\ndef multi_label_metrics(predictions, labels, threshold=0.5):\n    # first, apply sigmoid on predictions which are of shape (batch_size, num_labels)\n    probs = tf.math.sigmoid(predictions)\n    # next, use threshold to turn them into integer predictions\n    y_pred = np.zeros(probs.shape)\n    y_pred[np.where(probs >= threshold)] = 1\n    # finally, compute metrics\n    y_true = labels\n    f1_micro_average = matrices.f1_score(y_true=y_true, y_pred=y_pred, average='micro')\n    roc_auc = matrices.roc_auc_score(y_true, y_pred, average = 'micro')\n    accuracy = matrices.accuracy_score(y_true, y_pred)\n    hamming_loss = matrices.hamming_loss(y_true, y_pred)\n    jaccard_score = matrices.jaccard_score(y_true, y_pred, average='micro')\n    zero_one_loss = matrices.zero_one_loss(y_true, y_pred)\n    # return as dictionary\n    metrics = {\n        'f1': f1_micro_average,\n        'roc_auc': roc_auc,\n        'accuracy': accuracy,\n        'hamming_loss': hamming_loss,\n        'jaccard_score': jaccard_score,\n        'zero_one_loss': zero_one_loss\n    }\n    return metrics\n\ndef compute_metrics(p: EvalPrediction):\n    preds = p.predictions[0] if isinstance(p.predictions, \n            tuple) else p.predictions\n    result = multi_label_metrics(\n        predictions=preds, \n        labels=p.label_ids)\n    return result","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:47.829006Z","iopub.execute_input":"2024-05-02T15:07:47.829269Z","iopub.status.idle":"2024-05-02T15:07:47.838152Z","shell.execute_reply.started":"2024-05-02T15:07:47.829247Z","shell.execute_reply":"2024-05-02T15:07:47.837292Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"from transformers import TrainingArguments, Trainer","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:47.839823Z","iopub.execute_input":"2024-05-02T15:07:47.841389Z","iopub.status.idle":"2024-05-02T15:07:47.880808Z","shell.execute_reply.started":"2024-05-02T15:07:47.841331Z","shell.execute_reply":"2024-05-02T15:07:47.880106Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"args = TrainingArguments(\n    output_dir='./results/',\n    evaluation_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    save_total_limit=3,\n    learning_rate=1e-5,\n    per_device_train_batch_size=32,\n    per_device_eval_batch_size=32,\n    num_train_epochs=15,\n    report_to=\"none\",\n    load_best_model_at_end=True,\n    metric_for_best_model=\"f1\",\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:47.881745Z","iopub.execute_input":"2024-05-02T15:07:47.882046Z","iopub.status.idle":"2024-05-02T15:07:47.951134Z","shell.execute_reply.started":"2024-05-02T15:07:47.882023Z","shell.execute_reply":"2024-05-02T15:07:47.950386Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"trainer = Trainer(\n    model,\n    args,\n    train_dataset=encoded_dataset_dict_tokenized['train'],\n    eval_dataset=encoded_dataset_dict_tokenized['valid'],\n    tokenizer=tokenizer,\n    data_collator=data_collator,\n    compute_metrics=compute_metrics\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:47.952313Z","iopub.execute_input":"2024-05-02T15:07:47.952934Z","iopub.status.idle":"2024-05-02T15:07:48.278047Z","shell.execute_reply.started":"2024-05-02T15:07:47.952900Z","shell.execute_reply":"2024-05-02T15:07:48.277274Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/accelerate/accelerator.py:436: FutureWarning: Passing the following arguments to `Accelerator` is deprecated and will be removed in version 1.0 of Accelerate: dict_keys(['dispatch_batches', 'split_batches', 'even_batches', 'use_seedable_sampler']). Please pass an `accelerate.DataLoaderConfiguration` instead: \ndataloader_config = DataLoaderConfiguration(dispatch_batches=None, split_batches=False, even_batches=True, use_seedable_sampler=True)\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"trainer.train(resume_from_checkpoint=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:07:48.279259Z","iopub.execute_input":"2024-05-02T15:07:48.279690Z","iopub.status.idle":"2024-05-02T15:43:47.583578Z","shell.execute_reply.started":"2024-05-02T15:07:48.279652Z","shell.execute_reply":"2024-05-02T15:43:47.582682Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='7965' max='7965' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [7965/7965 35:55, Epoch 15/15]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>F1</th>\n      <th>Roc Auc</th>\n      <th>Accuracy</th>\n      <th>Hamming Loss</th>\n      <th>Jaccard Score</th>\n      <th>Zero One Loss</th>\n      <th>Runtime</th>\n      <th>Samples Per Second</th>\n      <th>Steps Per Second</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>11</td>\n      <td>0.122300</td>\n      <td>0.216310</td>\n      <td>0.804706</td>\n      <td>0.871623</td>\n      <td>0.736973</td>\n      <td>0.082382</td>\n      <td>0.673228</td>\n      <td>0.263027</td>\n      <td>20.293000</td>\n      <td>119.155000</td>\n      <td>3.745000</td>\n    </tr>\n    <tr>\n      <td>12</td>\n      <td>0.123800</td>\n      <td>0.220416</td>\n      <td>0.805727</td>\n      <td>0.868981</td>\n      <td>0.738627</td>\n      <td>0.080811</td>\n      <td>0.674659</td>\n      <td>0.261373</td>\n      <td>19.700300</td>\n      <td>122.739000</td>\n      <td>3.858000</td>\n    </tr>\n    <tr>\n      <td>13</td>\n      <td>0.113100</td>\n      <td>0.224958</td>\n      <td>0.800784</td>\n      <td>0.869169</td>\n      <td>0.734905</td>\n      <td>0.084036</td>\n      <td>0.667757</td>\n      <td>0.265095</td>\n      <td>19.722800</td>\n      <td>122.599000</td>\n      <td>3.853000</td>\n    </tr>\n    <tr>\n      <td>14</td>\n      <td>0.108700</td>\n      <td>0.230055</td>\n      <td>0.805277</td>\n      <td>0.871011</td>\n      <td>0.738213</td>\n      <td>0.081803</td>\n      <td>0.674028</td>\n      <td>0.261787</td>\n      <td>19.713200</td>\n      <td>122.659000</td>\n      <td>3.855000</td>\n    </tr>\n    <tr>\n      <td>15</td>\n      <td>0.103500</td>\n      <td>0.228104</td>\n      <td>0.804544</td>\n      <td>0.871798</td>\n      <td>0.737386</td>\n      <td>0.082548</td>\n      <td>0.673001</td>\n      <td>0.262614</td>\n      <td>19.728600</td>\n      <td>122.563000</td>\n      <td>3.852000</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=7965, training_loss=0.0369117195622695, metrics={'train_runtime': 2157.7155, 'train_samples_per_second': 118.035, 'train_steps_per_second': 3.691, 'total_flos': 3.350612205672192e+16, 'train_loss': 0.0369117195622695, 'epoch': 15.0})"},"metadata":{}}]},{"cell_type":"code","source":"trainer.evaluate()","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:43:47.584913Z","iopub.execute_input":"2024-05-02T15:43:47.585297Z","iopub.status.idle":"2024-05-02T15:44:07.329039Z","shell.execute_reply.started":"2024-05-02T15:43:47.585264Z","shell.execute_reply":"2024-05-02T15:44:07.328180Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"{'eval_loss': 0.21257878839969635,\n 'eval_f1': 0.8072813612979818,\n 'eval_roc_auc': 0.8711005372387448,\n 'eval_accuracy': 0.738626964433416,\n 'eval_hamming_loss': 0.08056244830438379,\n 'eval_jaccard_score': 0.6768414067684141,\n 'eval_zero_one_loss': 0.261373035566584,\n 'eval_runtime': 19.7352,\n 'eval_samples_per_second': 122.522,\n 'eval_steps_per_second': 3.851,\n 'epoch': 15.0}"},"metadata":{}}]},{"cell_type":"code","source":"actual_labels = encoded_dataset_dict_tokenized['test']['labels']\npred_labels = trainer.predict(\n    encoded_dataset_dict_tokenized['test']\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:44:07.330054Z","iopub.execute_input":"2024-05-02T15:44:07.330312Z","iopub.status.idle":"2024-05-02T15:44:46.997643Z","shell.execute_reply.started":"2024-05-02T15:44:07.330290Z","shell.execute_reply":"2024-05-02T15:44:46.996539Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"probs = tf.math.sigmoid(pred_labels.predictions)\ny_pred = np.zeros(probs.shape)\ny_pred[np.where(probs >= 0.3)] = 1","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:44:46.998712Z","iopub.execute_input":"2024-05-02T15:44:46.999031Z","iopub.status.idle":"2024-05-02T15:44:47.005954Z","shell.execute_reply.started":"2024-05-02T15:44:46.999005Z","shell.execute_reply":"2024-05-02T15:44:47.004963Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"print('Accuracy Score: ', matrices.accuracy_score(actual_labels, y_pred))\nprint('F1 Score: ', matrices.f1_score(actual_labels, y_pred, average='micro'))\nprint('ROC AUC: ', matrices.roc_auc_score(actual_labels, y_pred, average='micro'))\nprint('Hamming Loss: ', matrices.hamming_loss(actual_labels, y_pred))\nprint('Jaccard Score: ', matrices.jaccard_score(actual_labels, y_pred, average='micro'))\nprint('Zero-One Loss:', matrices.zero_one_loss(actual_labels, y_pred))\n\nprint('\\nClassification Report :-\\n',\n      matrices.classification_report(\n          actual_labels,\n          y_pred,\n          output_dict=False,\n          target_names=features,\n      )\n     )","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:44:47.007258Z","iopub.execute_input":"2024-05-02T15:44:47.007524Z","iopub.status.idle":"2024-05-02T15:44:47.065197Z","shell.execute_reply.started":"2024-05-02T15:44:47.007502Z","shell.execute_reply":"2024-05-02T15:44:47.064293Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Accuracy Score:  0.697000821692687\nF1 Score:  0.7913774205334307\nROC AUC:  0.8779953100524817\nHamming Loss:  0.09383730484798686\nJaccard Score:  0.654776299879081\nZero-One Loss: 0.30299917830731304\n\nClassification Report :-\n               precision    recall  f1-score   support\n\n  defamation       0.61      0.74      0.67       997\n        hate       0.54      0.65      0.59       598\n    non-hate       0.93      0.94      0.93      2421\n    violence       0.66      0.78      0.71       482\n      vulgar       0.73      0.76      0.75       730\n\n   micro avg       0.76      0.83      0.79      5228\n   macro avg       0.69      0.77      0.73      5228\nweighted avg       0.77      0.83      0.80      5228\n samples avg       0.75      0.79      0.76      5228\n\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in samples with no predicted labels. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in samples with no true labels. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:44:47.066270Z","iopub.execute_input":"2024-05-02T15:44:47.066535Z","iopub.status.idle":"2024-05-02T15:44:47.070503Z","shell.execute_reply.started":"2024-05-02T15:44:47.066512Z","shell.execute_reply":"2024-05-02T15:44:47.069576Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"confusion_matrices =  matrices.multilabel_confusion_matrix(\n    y_pred,\n    actual_labels\n)\n\nfig, axis = plt.subplots(2, 3, figsize=(12, 7))\naxis = axis.ravel()\nfor i in range(len(confusion_matrices)):\n    disp = matrices.ConfusionMatrixDisplay(\n        confusion_matrices[i],\n    )\n    disp.plot(ax=axis[i], values_format='.4g')\n    disp.ax_.set_title(features[i])\n    disp.im_.colorbar.remove()\nfig.colorbar(disp.im_, ax=axis)\naxis[5].remove()","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:44:47.071653Z","iopub.execute_input":"2024-05-02T15:44:47.072230Z","iopub.status.idle":"2024-05-02T15:44:47.914957Z","shell.execute_reply.started":"2024-05-02T15:44:47.072205Z","shell.execute_reply":"2024-05-02T15:44:47.914061Z"},"trusted":true},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x700 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import os","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:44:47.916501Z","iopub.execute_input":"2024-05-02T15:44:47.916980Z","iopub.status.idle":"2024-05-02T15:44:47.921177Z","shell.execute_reply.started":"2024-05-02T15:44:47.916941Z","shell.execute_reply":"2024-05-02T15:44:47.920314Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"trained_model_name = model_name.split('/')[1] + '-hate-speech-ben-hin-epochs-' + str(args.num_train_epochs)\ntrainer.save_model('./' + trained_model_name)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:44:47.922332Z","iopub.execute_input":"2024-05-02T15:44:47.922617Z","iopub.status.idle":"2024-05-02T15:44:49.360878Z","shell.execute_reply.started":"2024-05-02T15:44:47.922594Z","shell.execute_reply":"2024-05-02T15:44:49.360011Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"os.system(\"cd /kaggle/working/; zip -r \"+trained_model_name+\".zip ./\"+trained_model_name)","metadata":{"execution":{"iopub.status.busy":"2024-05-02T15:44:49.361975Z","iopub.execute_input":"2024-05-02T15:44:49.362264Z","iopub.status.idle":"2024-05-02T15:45:24.481872Z","shell.execute_reply.started":"2024-05-02T15:44:49.362240Z","shell.execute_reply":"2024-05-02T15:45:24.480819Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"  adding: bert-base-multilingual-uncased-hate-speech-ben-hin-epochs-15/ (stored 0%)\n  adding: bert-base-multilingual-uncased-hate-speech-ben-hin-epochs-15/tokenizer.json (deflated 69%)\n  adding: bert-base-multilingual-uncased-hate-speech-ben-hin-epochs-15/special_tokens_map.json (deflated 42%)\n  adding: bert-base-multilingual-uncased-hate-speech-ben-hin-epochs-15/model.safetensors (deflated 7%)\n  adding: bert-base-multilingual-uncased-hate-speech-ben-hin-epochs-15/training_args.bin (deflated 51%)\n  adding: bert-base-multilingual-uncased-hate-speech-ben-hin-epochs-15/vocab.txt (deflated 48%)\n  adding: bert-base-multilingual-uncased-hate-speech-ben-hin-epochs-15/tokenizer_config.json (deflated 76%)\n  adding: bert-base-multilingual-uncased-hate-speech-ben-hin-epochs-15/config.json (deflated 56%)\n","output_type":"stream"},{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]}]}