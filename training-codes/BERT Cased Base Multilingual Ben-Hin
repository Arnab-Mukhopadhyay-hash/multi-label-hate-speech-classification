{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8250654,"sourceType":"datasetVersion","datasetId":4895458}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Dataset Processing","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:12.630812Z","iopub.execute_input":"2024-05-03T03:04:12.631675Z","iopub.status.idle":"2024-05-03T03:04:13.011662Z","shell.execute_reply.started":"2024-05-03T03:04:12.631642Z","shell.execute_reply":"2024-05-03T03:04:13.010871Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"## Bengali Dataset Reading","metadata":{}},{"cell_type":"code","source":"ben_df_folder = \"/kaggle/input/modified-hate-speech-bengali-hindi/bengali-hate-speech/\"\nben_df_dict = {}\nben_df_dict['train'] = pd.read_csv(ben_df_folder + \"bengali-hate-speech_train.csv\")\nben_df_dict['test'] = pd.read_csv(ben_df_folder + \"bengali-hate-speech_test.csv\")\nben_df_dict['valid'] = pd.read_csv(ben_df_folder + \"bengali-hate-speech_valid.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:13.013110Z","iopub.execute_input":"2024-05-03T03:04:13.013480Z","iopub.status.idle":"2024-05-03T03:04:13.191329Z","shell.execute_reply.started":"2024-05-03T03:04:13.013457Z","shell.execute_reply":"2024-05-03T03:04:13.190542Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"## Hindi Dataset Reading","metadata":{}},{"cell_type":"code","source":"hin_df_folder = \"/kaggle/input/modified-hate-speech-bengali-hindi/hindi-hate-speech/\"\nhin_df_dict = {}\nhin_df_dict['train'] = pd.read_csv(hin_df_folder + \"hindi-hate-speech_train.csv\")\nhin_df_dict['test'] = pd.read_csv(hin_df_folder + \"hindi-hate-speech_test.csv\")\nhin_df_dict['valid'] = pd.read_csv(hin_df_folder + \"hindi-hate-speech_valid.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:13.192606Z","iopub.execute_input":"2024-05-03T03:04:13.192968Z","iopub.status.idle":"2024-05-03T03:04:13.353919Z","shell.execute_reply.started":"2024-05-03T03:04:13.192937Z","shell.execute_reply":"2024-05-03T03:04:13.353047Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"## Merge the Dataframe Dicts","metadata":{}},{"cell_type":"code","source":"merged_df_dict = {}\nfor key in ben_df_dict.keys():\n    merged_df_dict[key] = pd.concat([ben_df_dict[key], hin_df_dict[key]], axis=0, ignore_index=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:13.356450Z","iopub.execute_input":"2024-05-03T03:04:13.356798Z","iopub.status.idle":"2024-05-03T03:04:13.364312Z","shell.execute_reply.started":"2024-05-03T03:04:13.356771Z","shell.execute_reply":"2024-05-03T03:04:13.363136Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"from datasets import Dataset, DatasetDict","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:13.365513Z","iopub.execute_input":"2024-05-03T03:04:13.365876Z","iopub.status.idle":"2024-05-03T03:04:14.417879Z","shell.execute_reply.started":"2024-05-03T03:04:13.365840Z","shell.execute_reply":"2024-05-03T03:04:14.416840Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"merged_dataset_dict = DatasetDict()\nfor key in merged_df_dict.keys():\n    merged_dataset_dict[key] = Dataset.from_pandas(merged_df_dict[key])","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:14.419128Z","iopub.execute_input":"2024-05-03T03:04:14.419743Z","iopub.status.idle":"2024-05-03T03:04:14.538861Z","shell.execute_reply.started":"2024-05-03T03:04:14.419690Z","shell.execute_reply":"2024-05-03T03:04:14.538053Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"features = merged_dataset_dict['train'].column_names\nfeatures.remove('text')\nnum_features = len(features)\nfeatures, num_features","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:14.539928Z","iopub.execute_input":"2024-05-03T03:04:14.540186Z","iopub.status.idle":"2024-05-03T03:04:14.547600Z","shell.execute_reply.started":"2024-05-03T03:04:14.540165Z","shell.execute_reply":"2024-05-03T03:04:14.546754Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(['defamation', 'hate', 'non-hate', 'violence', 'vulgar'], 5)"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom transformers import AutoTokenizer, DataCollatorWithPadding, AutoModelForSequenceClassification","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:14.548797Z","iopub.execute_input":"2024-05-03T03:04:14.549086Z","iopub.status.idle":"2024-05-03T03:04:30.637613Z","shell.execute_reply.started":"2024-05-03T03:04:14.549062Z","shell.execute_reply":"2024-05-03T03:04:30.636766Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"2024-05-03 03:04:16.218710: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-03 03:04:16.218839: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-03 03:04:16.344835: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"model_name = \"google-bert/bert-base-multilingual-cased\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForSequenceClassification.from_pretrained(\n    model_name,\n    problem_type=\"multi_label_classification\",\n    num_labels=num_features\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:30.638996Z","iopub.execute_input":"2024-05-03T03:04:30.639541Z","iopub.status.idle":"2024-05-03T03:04:36.926936Z","shell.execute_reply.started":"2024-05-03T03:04:30.639516Z","shell.execute_reply":"2024-05-03T03:04:36.926101Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/49.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"40bcb5a309ba4fb48c7b27f12cd5c824"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/625 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e92daffb82404ebeb9975a9f8bc25d36"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/996k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5dc8b433a0e14131a70babdeb2e8b15d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.96M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c3b83364181146fab34f85a7f446629b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/714M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6ba2f450e80848ed9ed20d6e2df3dcf0"}},"metadata":{}},{"name":"stderr","text":"Some weights of BertForSequenceClassification were not initialized from the model checkpoint at google-bert/bert-base-multilingual-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}]},{"cell_type":"code","source":"def tokenize_dataset(dataset):\n    encoding = tokenizer(\n        dataset['text'],\n        padding=\"max_length\",\n        max_length=256,\n        truncation=True\n    )\n    labels_batch = {k: dataset[k] for k in dataset.keys() if k in features}\n    labels_matrix = np.zeros((len(dataset['text'],), len(features)))\n    for idx, label in enumerate(features):\n        labels_matrix[:, idx] = labels_batch[label]\n    encoding['labels'] = labels_matrix.tolist()\n    return encoding\n\nencoded_dataset_dict_tokenized = merged_dataset_dict.map(\n    tokenize_dataset,\n    batched=True,\n    remove_columns=['text'] + features\n)\n\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:36.931635Z","iopub.execute_input":"2024-05-03T03:04:36.932126Z","iopub.status.idle":"2024-05-03T03:04:43.342704Z","shell.execute_reply.started":"2024-05-03T03:04:36.932091Z","shell.execute_reply":"2024-05-03T03:04:43.341777Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/16979 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"79531134d71841c5b8ddc5469fcc63ec"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4868 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7027db8d74c5496293d024a36d0cd03a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/2418 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6d843727fe6f4dcc98333487d13acaf2"}},"metadata":{}}]},{"cell_type":"code","source":"encoded_dataset_dict_tokenized.set_format(\n    type='torch'\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.344015Z","iopub.execute_input":"2024-05-03T03:04:43.344376Z","iopub.status.idle":"2024-05-03T03:04:43.350573Z","shell.execute_reply.started":"2024-05-03T03:04:43.344344Z","shell.execute_reply":"2024-05-03T03:04:43.349666Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"encoded_dataset_dict_tokenized","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.351770Z","iopub.execute_input":"2024-05-03T03:04:43.352160Z","iopub.status.idle":"2024-05-03T03:04:43.363008Z","shell.execute_reply.started":"2024-05-03T03:04:43.352135Z","shell.execute_reply":"2024-05-03T03:04:43.361966Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"DatasetDict({\n    train: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 16979\n    })\n    test: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 4868\n    })\n    valid: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 2418\n    })\n})"},"metadata":{}}]},{"cell_type":"code","source":"import sklearn.metrics as matrices\nfrom transformers import EvalPrediction","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.364152Z","iopub.execute_input":"2024-05-03T03:04:43.364606Z","iopub.status.idle":"2024-05-03T03:04:43.374042Z","shell.execute_reply.started":"2024-05-03T03:04:43.364575Z","shell.execute_reply":"2024-05-03T03:04:43.373143Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# source: https://jesusleal.io/2021/04/21/Longformer-multilabel-classification/\ndef multi_label_metrics(predictions, labels, threshold=0.5):\n    # first, apply sigmoid on predictions which are of shape (batch_size, num_labels)\n    probs = tf.math.sigmoid(predictions)\n    # next, use threshold to turn them into integer predictions\n    y_pred = np.zeros(probs.shape)\n    y_pred[np.where(probs >= threshold)] = 1\n    # finally, compute metrics\n    y_true = labels\n    f1_micro_average = matrices.f1_score(y_true=y_true, y_pred=y_pred, average='micro')\n    roc_auc = matrices.roc_auc_score(y_true, y_pred, average = 'micro')\n    accuracy = matrices.accuracy_score(y_true, y_pred)\n    hamming_loss = matrices.hamming_loss(y_true, y_pred)\n    jaccard_score = matrices.jaccard_score(y_true, y_pred, average='micro')\n    zero_one_loss = matrices.zero_one_loss(y_true, y_pred)\n    # return as dictionary\n    metrics = {\n        'f1': f1_micro_average,\n        'roc_auc': roc_auc,\n        'accuracy': accuracy,\n        'hamming_loss': hamming_loss,\n        'jaccard_score': jaccard_score,\n        'zero_one_loss': zero_one_loss\n    }\n    return metrics\n\ndef compute_metrics(p: EvalPrediction):\n    preds = p.predictions[0] if isinstance(p.predictions, \n            tuple) else p.predictions\n    result = multi_label_metrics(\n        predictions=preds, \n        labels=p.label_ids)\n    return result","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.375386Z","iopub.execute_input":"2024-05-03T03:04:43.375781Z","iopub.status.idle":"2024-05-03T03:04:43.384982Z","shell.execute_reply.started":"2024-05-03T03:04:43.375750Z","shell.execute_reply":"2024-05-03T03:04:43.384120Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"from transformers import TrainingArguments, Trainer","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.386023Z","iopub.execute_input":"2024-05-03T03:04:43.386313Z","iopub.status.idle":"2024-05-03T03:04:43.429172Z","shell.execute_reply.started":"2024-05-03T03:04:43.386289Z","shell.execute_reply":"2024-05-03T03:04:43.428271Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"args = TrainingArguments(\n    output_dir='./results/',\n    evaluation_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    save_total_limit=3,\n    learning_rate=1e-5,\n    per_device_train_batch_size=32,\n    per_device_eval_batch_size=32,\n    num_train_epochs=10,\n    report_to=\"none\",\n    load_best_model_at_end=True,\n    metric_for_best_model=\"f1\",\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.430457Z","iopub.execute_input":"2024-05-03T03:04:43.431288Z","iopub.status.idle":"2024-05-03T03:04:43.503094Z","shell.execute_reply.started":"2024-05-03T03:04:43.431254Z","shell.execute_reply":"2024-05-03T03:04:43.502238Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"trainer = Trainer(\n    model,\n    args,\n    train_dataset=encoded_dataset_dict_tokenized['train'],\n    eval_dataset=encoded_dataset_dict_tokenized['valid'],\n    tokenizer=tokenizer,\n    data_collator=data_collator,\n    compute_metrics=compute_metrics\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.504183Z","iopub.execute_input":"2024-05-03T03:04:43.504464Z","iopub.status.idle":"2024-05-03T03:04:43.848987Z","shell.execute_reply.started":"2024-05-03T03:04:43.504441Z","shell.execute_reply":"2024-05-03T03:04:43.848150Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/accelerate/accelerator.py:436: FutureWarning: Passing the following arguments to `Accelerator` is deprecated and will be removed in version 1.0 of Accelerate: dict_keys(['dispatch_batches', 'split_batches', 'even_batches', 'use_seedable_sampler']). Please pass an `accelerate.DataLoaderConfiguration` instead: \ndataloader_config = DataLoaderConfiguration(dispatch_batches=None, split_batches=False, even_batches=True, use_seedable_sampler=True)\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"import os","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.850208Z","iopub.execute_input":"2024-05-03T03:04:43.850856Z","iopub.status.idle":"2024-05-03T03:04:43.855290Z","shell.execute_reply.started":"2024-05-03T03:04:43.850821Z","shell.execute_reply":"2024-05-03T03:04:43.854225Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"files = os.listdir(args.output_dir)\nif len(files) == 0:\n    trainer.train()\nelse:\n    trainer.train(resume_from_checkpoint=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:04:43.856389Z","iopub.execute_input":"2024-05-03T03:04:43.856666Z","iopub.status.idle":"2024-05-03T03:41:14.793481Z","shell.execute_reply.started":"2024-05-03T03:04:43.856644Z","shell.execute_reply":"2024-05-03T03:41:14.792447Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='5310' max='5310' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [5310/5310 36:27, Epoch 10/10]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>F1</th>\n      <th>Roc Auc</th>\n      <th>Accuracy</th>\n      <th>Hamming Loss</th>\n      <th>Jaccard Score</th>\n      <th>Zero One Loss</th>\n      <th>Runtime</th>\n      <th>Samples Per Second</th>\n      <th>Steps Per Second</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>6</td>\n      <td>0.168100</td>\n      <td>0.213013</td>\n      <td>0.793676</td>\n      <td>0.862932</td>\n      <td>0.724979</td>\n      <td>0.086352</td>\n      <td>0.657929</td>\n      <td>0.275021</td>\n      <td>20.647400</td>\n      <td>117.109000</td>\n      <td>3.681000</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>0.159000</td>\n      <td>0.227290</td>\n      <td>0.793524</td>\n      <td>0.860289</td>\n      <td>0.730769</td>\n      <td>0.085443</td>\n      <td>0.657720</td>\n      <td>0.269231</td>\n      <td>20.069100</td>\n      <td>120.484000</td>\n      <td>3.787000</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>0.150900</td>\n      <td>0.216887</td>\n      <td>0.797189</td>\n      <td>0.861500</td>\n      <td>0.730769</td>\n      <td>0.083540</td>\n      <td>0.662771</td>\n      <td>0.269231</td>\n      <td>20.076400</td>\n      <td>120.440000</td>\n      <td>3.786000</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>0.137300</td>\n      <td>0.228053</td>\n      <td>0.796315</td>\n      <td>0.861551</td>\n      <td>0.730769</td>\n      <td>0.084119</td>\n      <td>0.661564</td>\n      <td>0.269231</td>\n      <td>20.092800</td>\n      <td>120.341000</td>\n      <td>3.782000</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>0.129600</td>\n      <td>0.223722</td>\n      <td>0.797868</td>\n      <td>0.865806</td>\n      <td>0.734905</td>\n      <td>0.084698</td>\n      <td>0.663711</td>\n      <td>0.265095</td>\n      <td>20.097000</td>\n      <td>120.317000</td>\n      <td>3.782000</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}}]},{"cell_type":"code","source":"trainer.evaluate()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:41:14.795031Z","iopub.execute_input":"2024-05-03T03:41:14.795354Z","iopub.status.idle":"2024-05-03T03:41:34.833852Z","shell.execute_reply.started":"2024-05-03T03:41:14.795328Z","shell.execute_reply":"2024-05-03T03:41:34.832737Z"},"trusted":true},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"{'eval_loss': 0.2237221896648407,\n 'eval_f1': 0.7978681405448085,\n 'eval_roc_auc': 0.8658059734115214,\n 'eval_accuracy': 0.7349048800661704,\n 'eval_hamming_loss': 0.08469809760132341,\n 'eval_jaccard_score': 0.6637110016420361,\n 'eval_zero_one_loss': 0.2650951199338296,\n 'eval_runtime': 20.028,\n 'eval_samples_per_second': 120.731,\n 'eval_steps_per_second': 3.795,\n 'epoch': 10.0}"},"metadata":{}}]},{"cell_type":"code","source":"actual_labels = encoded_dataset_dict_tokenized['test']['labels']\npred_labels = trainer.predict(\n    encoded_dataset_dict_tokenized['test']\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:41:34.835176Z","iopub.execute_input":"2024-05-03T03:41:34.835553Z","iopub.status.idle":"2024-05-03T03:42:15.177238Z","shell.execute_reply.started":"2024-05-03T03:41:34.835519Z","shell.execute_reply":"2024-05-03T03:42:15.176215Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"probs = tf.math.sigmoid(pred_labels.predictions)\ny_pred = np.zeros(probs.shape)\ny_pred[np.where(probs >= 0.3)] = 1","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:42:15.179630Z","iopub.execute_input":"2024-05-03T03:42:15.180047Z","iopub.status.idle":"2024-05-03T03:42:15.186632Z","shell.execute_reply.started":"2024-05-03T03:42:15.180009Z","shell.execute_reply":"2024-05-03T03:42:15.185733Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"print('Accuracy Score: ', matrices.accuracy_score(actual_labels, y_pred))\nprint('F1 Score: ', matrices.f1_score(actual_labels, y_pred, average='micro'))\nprint('ROC AUC: ', matrices.roc_auc_score(actual_labels, y_pred, average='micro'))\nprint('Hamming Loss: ', matrices.hamming_loss(actual_labels, y_pred))\nprint('Jaccard Score: ', matrices.jaccard_score(actual_labels, y_pred, average='micro'))\nprint('Zero-One Loss:', matrices.zero_one_loss(actual_labels, y_pred))\n\nprint('\\nClassification Report :-\\n',\n      matrices.classification_report(\n          actual_labels,\n          y_pred,\n          output_dict=False,\n          target_names=features,\n      )\n     )","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:42:15.187848Z","iopub.execute_input":"2024-05-03T03:42:15.188194Z","iopub.status.idle":"2024-05-03T03:42:15.246629Z","shell.execute_reply.started":"2024-05-03T03:42:15.188162Z","shell.execute_reply":"2024-05-03T03:42:15.245706Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Accuracy Score:  0.6965899753492194\nF1 Score:  0.7867862371888725\nROC AUC:  0.8744991269600563\nHamming Loss:  0.09572719802793755\nJaccard Score:  0.648514104691507\nZero-One Loss: 0.3034100246507806\n\nClassification Report :-\n               precision    recall  f1-score   support\n\n  defamation       0.59      0.74      0.66       997\n        hate       0.55      0.61      0.58       598\n    non-hate       0.92      0.94      0.93      2421\n    violence       0.67      0.80      0.73       482\n      vulgar       0.72      0.75      0.73       730\n\n   micro avg       0.75      0.82      0.79      5228\n   macro avg       0.69      0.77      0.73      5228\nweighted avg       0.77      0.82      0.79      5228\n samples avg       0.74      0.78      0.75      5228\n\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in samples with no predicted labels. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in samples with no true labels. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:42:15.247889Z","iopub.execute_input":"2024-05-03T03:42:15.248160Z","iopub.status.idle":"2024-05-03T03:42:15.252505Z","shell.execute_reply.started":"2024-05-03T03:42:15.248137Z","shell.execute_reply":"2024-05-03T03:42:15.251350Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"confusion_matrices =  matrices.multilabel_confusion_matrix(\n    y_pred,\n    actual_labels\n)\n\nfig, axis = plt.subplots(2, 3, figsize=(12, 7))\naxis = axis.ravel()\nfor i in range(len(confusion_matrices)):\n    disp = matrices.ConfusionMatrixDisplay(\n        confusion_matrices[i],\n    )\n    disp.plot(ax=axis[i], values_format='.4g')\n    disp.ax_.set_title(features[i])\n    disp.im_.colorbar.remove()\nfig.colorbar(disp.im_, ax=axis)\naxis[5].remove()","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:42:15.253569Z","iopub.execute_input":"2024-05-03T03:42:15.253850Z","iopub.status.idle":"2024-05-03T03:42:16.133253Z","shell.execute_reply.started":"2024-05-03T03:42:15.253827Z","shell.execute_reply":"2024-05-03T03:42:16.132295Z"},"trusted":true},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x700 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"trained_model_name = model_name.split('/')[1] + '-hate-speech-ben-hin-epochs-' + str(args.num_train_epochs)\ntrainer.save_model('./' + trained_model_name)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:42:16.134703Z","iopub.execute_input":"2024-05-03T03:42:16.135004Z","iopub.status.idle":"2024-05-03T03:42:17.703223Z","shell.execute_reply.started":"2024-05-03T03:42:16.134978Z","shell.execute_reply":"2024-05-03T03:42:17.702369Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"os.system(\"cd /kaggle/working/; zip -r \"+trained_model_name+\".zip ./\"+trained_model_name)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:42:17.704327Z","iopub.execute_input":"2024-05-03T03:42:17.704699Z","iopub.status.idle":"2024-05-03T03:42:55.873216Z","shell.execute_reply.started":"2024-05-03T03:42:17.704673Z","shell.execute_reply":"2024-05-03T03:42:55.872329Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"  adding: bert-base-multilingual-cased-hate-speech-ben-hin-epochs-10/ (stored 0%)\n  adding: bert-base-multilingual-cased-hate-speech-ben-hin-epochs-10/vocab.txt (deflated 45%)\n  adding: bert-base-multilingual-cased-hate-speech-ben-hin-epochs-10/tokenizer.json (deflated 67%)\n  adding: bert-base-multilingual-cased-hate-speech-ben-hin-epochs-10/training_args.bin (deflated 51%)\n  adding: bert-base-multilingual-cased-hate-speech-ben-hin-epochs-10/model.safetensors (deflated 7%)\n  adding: bert-base-multilingual-cased-hate-speech-ben-hin-epochs-10/config.json (deflated 56%)\n  adding: bert-base-multilingual-cased-hate-speech-ben-hin-epochs-10/tokenizer_config.json (deflated 76%)\n  adding: bert-base-multilingual-cased-hate-speech-ben-hin-epochs-10/special_tokens_map.json (deflated 42%)\n","output_type":"stream"},{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"os.system(\"rm -r ./\" + trained_model_name)","metadata":{"execution":{"iopub.status.busy":"2024-05-03T03:43:49.855831Z","iopub.execute_input":"2024-05-03T03:43:49.856216Z","iopub.status.idle":"2024-05-03T03:43:49.969435Z","shell.execute_reply.started":"2024-05-03T03:43:49.856186Z","shell.execute_reply":"2024-05-03T03:43:49.968476Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]}]}